USE [ENERGYDASHBOARDD]
GO

CREATE TABLE Spaces (
    SpaceID INT PRIMARY KEY IDENTITY(1,1),
    ParentSpaceID INT NULL,  
    SpaceName VARCHAR(100),
    SpaceType VARCHAR(50),  
    FOREIGN KEY (ParentSpaceID) REFERENCES Spaces(SpaceID)
);


INSERT INTO Spaces (ParentSpaceID, SpaceName, SpaceType)
VALUES (NULL, 'Vatika', 'Site');

INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block A', 'Tower');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block B', 'Tower');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block C', 'Tower');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block D', 'Tower');

-- Block A (ID = 2)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (2, '1st Floor - A', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (2, '2nd Floor - A', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (2, '3rd Floor - A', 'Floor');
-- Block B (ID = 3)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (3, '1st Floor - B', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (3, '2nd Floor - B', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (3, '3rd Floor - B', 'Floor');
-- Block C (ID = 9)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (9, '1st Floor - C', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (9, '2nd Floor - C', 'Floor');
-- Block D (ID = 10)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (10, '1st Floor - D', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (10, '2nd Floor - D', 'Floor');

-- 1st Floor A (ID = 4)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (4, 'AI Lab', 'Lab');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (4, 'IoT Lab', 'Lab');
-- 2nd Floor A (ID = 5)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Server Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Meeting Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Store Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Pantry', 'Room');
-- 3rd Floor A (ID = 11)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (11, 'Office', 'Room');

-- 1st Floor B (ID = 8)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (8, 'ML Lab', 'Lab');
-- 2nd Floor B (ID = 12)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (12, 'Server Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (12, 'Meeting Room', 'Room');
-- 3rd Floor B (ID = 13)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (13, 'Office', 'Room');

-- 1st Floor C (ID = 14)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (14, 'Office', 'Room');
-- 2nd Floor C (ID = 15)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (15, 'Store Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (15, 'Server Room', 'Room');

-- 1st Floor D (ID = 16)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (16, 'Server Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (16, 'ML Lab', 'Lab');
-- 2nd Floor D (ID = 17)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (17, 'Office', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (17, 'Meeting Room', 'Room');


CREATE TABLE Meters (
    MeterID INT PRIMARY KEY IDENTITY(100,1),
    SpaceID INT,
    MeterName VARCHAR(100),
    FOREIGN KEY (SpaceID) REFERENCES Spaces(SpaceID)
);


INSERT INTO Meters (SpaceID, MeterName) VALUES
(2, 'Main Meter - Block A'),
(3, 'Main Meter - Block B'),
(9, 'Main Meter - Block C'),
(10, 'Main Meter - Block D');

INSERT INTO Meters (SpaceID, MeterName) VALUES
(4, '1st Floor - A Meter'),
(5, '2nd Floor - A Meter'),
(11, '3rd Floor - A Meter'),
(8, '1st Floor - B Meter'),
(12, '2nd Floor - B Meter'),
(13, '3rd Floor - B Meter'),
(14, '1st Floor - C Meter'),
(15, '2nd Floor - C Meter'),
(16, '1st Floor - D Meter'),
(17, '2nd Floor - D Meter');

INSERT INTO Meters (SpaceID, MeterName) VALUES
(6, 'AI Lab - A Meter '),
(7, 'IoT Lab - A Meter '),
(18, 'Server Room - A Meter '),
(24, 'Server Room - B Meter '),
(29, 'Server Room - C Meter '),
(30, 'Server Room - D Meter '),
(32, 'Office - D Meter ');


CREATE TABLE MeterReadings (
    MeterID INT,
    ReadingTimestamp DATETIME,
    Value decimal (18,2),
    FOREIGN KEY (MeterID) REFERENCES Meters(MeterID)
);

SELECT * FROM Spaces;
SELECT * FROM Meters;
SELECT * FROM MeterReadings;


SELECT MIN(ReadingTimestamp), MAX(ReadingTimestamp) FROM MeterReadings;
SELECT TOP 10 * FROM MeterReadings ORDER BY ReadingTimestamp ASC;


SELECT 
    S.SpaceName AS Space,
    S.SpaceType,
    M.MeterName,
    R.ReadingTimestamp,
    R.Value
FROM MeterReadings R
JOIN Meters M ON R.MeterID = M.MeterID
JOIN Spaces S ON M.SpaceID = S.SpaceID
ORDER BY R.ReadingTimestamp;


--level
WITH SpaceHierarchy AS (
    SELECT SpaceID, ParentSpaceID, SpaceName, SpaceType, 0 AS Level
    FROM Spaces
    WHERE ParentSpaceID IS NULL
    UNION ALL
    SELECT S.SpaceID, S.ParentSpaceID, S.SpaceName, S.SpaceType, H.Level + 1
    FROM Spaces S
    JOIN SpaceHierarchy H ON S.ParentSpaceID = H.SpaceID
)
SELECT * FROM SpaceHierarchy ORDER BY Level, SpaceName;


--no. of children
SELECT 
    Parent.SpaceID AS ParentSpaceID,
    Parent.SpaceName AS ParentSpaceName,
    COUNT(Child.SpaceID) AS NumberOfChildren
FROM Spaces Parent
LEFT JOIN Spaces Child ON Child.ParentSpaceID = Parent.SpaceID
GROUP BY Parent.SpaceID, Parent.SpaceName
ORDER BY NumberOfChildren DESC;


--energyconsumed
SELECT
    S.SpaceName,
    M.MeterName,
    R.ReadingTimestamp,
    R.Value AS CurrentReading,
    LAG(R.Value) OVER (PARTITION BY R.MeterID ORDER BY R.ReadingTimestamp) AS PreviousReading,
    R.Value - LAG(R.Value) OVER (PARTITION BY R.MeterID ORDER BY R.ReadingTimestamp) AS EnergyConsumed
FROM MeterReadings R
JOIN Meters M ON R.MeterID = M.MeterID
JOIN Spaces S ON M.SpaceID = S.SpaceID
ORDER BY R.MeterID, R.ReadingTimestamp;



--total energy consumed
WITH RecursiveSpaces AS (
    SELECT SpaceID
    FROM Spaces
    WHERE SpaceName = 'Block A' 
    UNION ALL
    SELECT S.SpaceID
    FROM Spaces S
    JOIN RecursiveSpaces RS ON S.ParentSpaceID = RS.SpaceID
),
ReadingsWithConsumption AS (
    SELECT 
        MR.MeterID,
        MR.ReadingTimestamp,
        MR.Value,
        LAG(MR.Value) OVER (PARTITION BY MR.MeterID ORDER BY MR.ReadingTimestamp) AS PrevValue
    FROM MeterReadings MR
    JOIN Meters M ON MR.MeterID = M.MeterID
    WHERE M.SpaceID IN (SELECT SpaceID FROM RecursiveSpaces)
)

SELECT 
    MeterID,
    SUM(CASE 
            WHEN PrevValue IS NOT NULL AND Value >= PrevValue THEN Value - PrevValue 
            ELSE 0 
        END) AS TotalEnergyConsumed
FROM ReadingsWithConsumption
GROUP BY MeterID;




--to insert flat file into meterreadings
insert into [dbo].[MeterReadings] (MeterID, ReadingTimestamp, Value)
select MeterID, ReadingTimestamp , Value from [dbo].[MeterReadings_Realistic_Jun2023_May2025]

--check meterid
select distinct MeterId from [dbo].[MeterReadings_Realistic_Jun2023_May2025]




CREATE TABLE Sites (
    SiteID INT PRIMARY KEY IDENTITY(1,1),
    SiteName NVARCHAR(100) NOT NULL,
    Address NVARCHAR(200),
    ContactPerson NVARCHAR(100),
    ContactEmail NVARCHAR(100),
    ContactPhone NVARCHAR(20),
    CreatedAt DATETIME DEFAULT GETDATE()
);



SELECT TOP (1000) [SiteID]
      ,[SiteName]
      ,[Address]
      ,[ContactPerson]
      ,[ContactEmail]
      ,[ContactPhone]
      ,[CreatedAt]
  FROM [EnergyDashboard].[dbo].[Sites]


 CREATE TABLE Users (
    UserId INT PRIMARY KEY IDENTITY(1,1),
    Username NVARCHAR(100) NOT NULL UNIQUE,
    Password NVARCHAR(100) NOT NULL
);

INSERT INTO Users (Username, Password)
VALUES ('Admin', 'admin@123');

select * from Users



























//full database
USE [ENERGYDASHBOARDD]
GO

CREATE TABLE Spaces (
    SpaceID INT PRIMARY KEY IDENTITY(1,1),
    ParentSpaceID INT NULL,  
    SpaceName VARCHAR(100),
    SpaceType VARCHAR(50),  
    FOREIGN KEY (ParentSpaceID) REFERENCES Spaces(SpaceID)
);


INSERT INTO Spaces (ParentSpaceID, SpaceName, SpaceType)
VALUES (NULL, 'Vatika', 'Site');

INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block A', 'Tower');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block B', 'Tower');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block C', 'Tower');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (1, 'Block D', 'Tower');

-- Block A (ID = 2)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (2, '1st Floor - A', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (2, '2nd Floor - A', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (2, '3rd Floor - A', 'Floor');
-- Block B (ID = 3)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (3, '1st Floor - B', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (3, '2nd Floor - B', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (3, '3rd Floor - B', 'Floor');
-- Block C (ID = 9)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (9, '1st Floor - C', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (9, '2nd Floor - C', 'Floor');
-- Block D (ID = 10)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (10, '1st Floor - D', 'Floor');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (10, '2nd Floor - D', 'Floor');

-- 1st Floor A (ID = 4)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (4, 'AI Lab', 'Lab');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (4, 'IoT Lab', 'Lab');
-- 2nd Floor A (ID = 5)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Server Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Meeting Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Store Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (5, 'Pantry', 'Room');
-- 3rd Floor A (ID = 11)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (11, 'Office', 'Room');

-- 1st Floor B (ID = 8)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (8, 'ML Lab', 'Lab');
-- 2nd Floor B (ID = 12)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (12, 'Server Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (12, 'Meeting Room', 'Room');
-- 3rd Floor B (ID = 13)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (13, 'Office', 'Room');

-- 1st Floor C (ID = 14)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (14, 'Office', 'Room');
-- 2nd Floor C (ID = 15)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (15, 'Store Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (15, 'Server Room', 'Room');

-- 1st Floor D (ID = 16)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (16, 'Server Room', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (16, 'ML Lab', 'Lab');
-- 2nd Floor D (ID = 17)
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (17, 'Office', 'Room');
INSERT INTO Spaces (ParentSpaceId, SpaceName, SpaceType) VALUES (17, 'Meeting Room', 'Room');


CREATE TABLE Meters (
    MeterID INT PRIMARY KEY IDENTITY(100,1),
    SpaceID INT,
    MeterName VARCHAR(100),
    FOREIGN KEY (SpaceID) REFERENCES Spaces(SpaceID)
);


INSERT INTO Meters (SpaceID, MeterName) VALUES
(2, 'Main Meter - Block A'),
(3, 'Main Meter - Block B'),
(9, 'Main Meter - Block C'),
(10, 'Main Meter - Block D');

INSERT INTO Meters (SpaceID, MeterName) VALUES
(4, '1st Floor - A Meter'),
(5, '2nd Floor - A Meter'),
(11, '3rd Floor - A Meter'),
(8, '1st Floor - B Meter'),
(12, '2nd Floor - B Meter'),
(13, '3rd Floor - B Meter'),
(14, '1st Floor - C Meter'),
(15, '2nd Floor - C Meter'),
(16, '1st Floor - D Meter'),
(17, '2nd Floor - D Meter');

INSERT INTO Meters (SpaceID, MeterName) VALUES
(6, 'AI Lab - A Meter '),
(7, 'IoT Lab - A Meter '),
(18, 'Server Room - A Meter '),
(24, 'Server Room - B Meter '),
(29, 'Server Room - C Meter '),
(30, 'Server Room - D Meter '),
(32, 'Office - D Meter ');


CREATE TABLE MeterReadings (
    MeterID INT,
    ReadingTimestamp DATETIME,
    Value decimal (18,2),
    FOREIGN KEY (MeterID) REFERENCES Meters(MeterID)
);

SELECT * FROM Spaces;
SELECT * FROM Meters;
SELECT * FROM MeterReadings;


SELECT MIN(ReadingTimestamp), MAX(ReadingTimestamp) FROM MeterReadings;
SELECT TOP 10 * FROM MeterReadings ORDER BY ReadingTimestamp ASC;


SELECT 
    S.SpaceName AS Space,
    S.SpaceType,
    M.MeterName,
    R.ReadingTimestamp,
    R.Value
FROM MeterReadings R
JOIN Meters M ON R.MeterID = M.MeterID
JOIN Spaces S ON M.SpaceID = S.SpaceID
ORDER BY R.ReadingTimestamp;


--level
WITH SpaceHierarchy AS (
    SELECT SpaceID, ParentSpaceID, SpaceName, SpaceType, 0 AS Level
    FROM Spaces
    WHERE ParentSpaceID IS NULL
    UNION ALL
    SELECT S.SpaceID, S.ParentSpaceID, S.SpaceName, S.SpaceType, H.Level + 1
    FROM Spaces S
    JOIN SpaceHierarchy H ON S.ParentSpaceID = H.SpaceID
)
SELECT * FROM SpaceHierarchy ORDER BY Level, SpaceName;


--no. of children
SELECT 
    Parent.SpaceID AS ParentSpaceID,
    Parent.SpaceName AS ParentSpaceName,
    COUNT(Child.SpaceID) AS NumberOfChildren
FROM Spaces Parent
LEFT JOIN Spaces Child ON Child.ParentSpaceID = Parent.SpaceID
GROUP BY Parent.SpaceID, Parent.SpaceName
ORDER BY NumberOfChildren DESC;


--energyconsumed
SELECT
    S.SpaceName,
    M.MeterName,
    R.ReadingTimestamp,
    R.Value AS CurrentReading,
    LAG(R.Value) OVER (PARTITION BY R.MeterID ORDER BY R.ReadingTimestamp) AS PreviousReading,
    R.Value - LAG(R.Value) OVER (PARTITION BY R.MeterID ORDER BY R.ReadingTimestamp) AS EnergyConsumed
FROM MeterReadings R
JOIN Meters M ON R.MeterID = M.MeterID
JOIN Spaces S ON M.SpaceID = S.SpaceID
ORDER BY R.MeterID, R.ReadingTimestamp;



--total energy consumed
WITH RecursiveSpaces AS (
    SELECT SpaceID
    FROM Spaces
    WHERE SpaceName = 'Block A' 
    UNION ALL
    SELECT S.SpaceID
    FROM Spaces S
    JOIN RecursiveSpaces RS ON S.ParentSpaceID = RS.SpaceID
),
ReadingsWithConsumption AS (
    SELECT 
        MR.MeterID,
        MR.ReadingTimestamp,
        MR.Value,
        LAG(MR.Value) OVER (PARTITION BY MR.MeterID ORDER BY MR.ReadingTimestamp) AS PrevValue
    FROM MeterReadings MR
    JOIN Meters M ON MR.MeterID = M.MeterID
    WHERE M.SpaceID IN (SELECT SpaceID FROM RecursiveSpaces)
)

SELECT 
    MeterID,
    SUM(CASE 
            WHEN PrevValue IS NOT NULL AND Value >= PrevValue THEN Value - PrevValue 
            ELSE 0 
        END) AS TotalEnergyConsumed
FROM ReadingsWithConsumption
GROUP BY MeterID;




--to insert flat file into meterreadings
insert into [dbo].[MeterReadings] (MeterID, ReadingTimestamp, Value)
select MeterID, ReadingTimestamp , Value from [dbo].[MeterReadings_Realistic_Jun2023_May2025]

--check meterid
select distinct MeterId from [dbo].[MeterReadings_Realistic_Jun2023_May2025]



DROP TABLE IF EXISTS Sites;

CREATE TABLE Sites (
    SiteId INT IDENTITY(1,1) PRIMARY KEY,
    SiteName NVARCHAR(200) NOT NULL,
    Address NVARCHAR(200) NOT NULL,
    ContactPerson NVARCHAR(200),
    ContactEmail NVARCHAR(200),
    ContactPhone NVARCHAR(40),
    CreatedAt DATETIME DEFAULT GETDATE()
);



SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'Sites' AND COLUMN_NAME = 'SiteId';
SELECT COLUMN_NAME, COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') AS IsIdentity
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'Sites';


EXEC sp_help 'Sites';


select * from Sites


CREATE TABLE Users (
    UserId INT PRIMARY KEY IDENTITY(1,1),
    Username NVARCHAR(100) NOT NULL UNIQUE,
    Password NVARCHAR(100) NOT NULL
);

ALTER TABLE Users
ADD RoleId INT FOREIGN KEY REFERENCES Roles(RoleId);
ALTER TABLE Users
ADD CONSTRAINT FK_Users_Roles
FOREIGN KEY (RoleId) REFERENCES Roles(RoleId);


CREATE TABLE Roles (
    RoleId INT PRIMARY KEY,
    RoleName NVARCHAR(50)
);

INSERT INTO Roles VALUES
(1, 'Admin'),
(2, 'AccountManager'),
(3, 'EnergyManager'),
(4, 'Viewer');



INSERT INTO Users (Username, Password)
VALUES ('Admin', 'admin@123');
UPDATE Users
SET RoleId = 1
WHERE Username = 'Admin';


select * from users

INSERT INTO Users (Username, Password, RoleId)
VALUES 

('acc_manager', 'account@123', 2),
('energy_mgr', 'energy@123', 3),
('viewer', 'viewer@123', 4);



SELECT * FROM Spaces;
SELECT * FROM Meters;
SELECT * FROM MeterReadings;
SELECT * FROM Sites;
SELECT * FROM Users;
SELECT * FROM Roles;


EXEC sp_help 'Sites';
