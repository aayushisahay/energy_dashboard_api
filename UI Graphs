// run " npm install bootstrap " in terminal before changing the code to implement the form //

//EnergyChart.jsx

import React, { useEffect, useState } from 'react';
import Highcharts from 'highcharts';
import HighchartsReact from 'highcharts-react-official';
import { getEnergySummary, getSpaceWiseEnergy } from '../services/api';
import 'bootstrap/dist/css/bootstrap.min.css';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const EnergyChart = () => {
  const [lineChartOptions, setLineChartOptions] = useState(null);
  const [pieChartOptions, setPieChartOptions] = useState(null);
  const [formData, setFormData] = useState({
    siteName: '',
    address: '',
    contactPerson: '',
    contactEmail: '',
    contactPhone: ''
  });
  const [submitStatus, setSubmitStatus] = useState('');
  const [spaceIds, setSpaceIds] = useState([1, 2, 3, 4, 6]);
  const [startDate, setStartDate] = useState(new Date('2024-01-01T00:00:00'));
  const [endDate, setEndDate] = useState(new Date('2024-04-30T23:59:00'));

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Convert dates to ISO strings without timezone issues
        const startTime = startDate.toISOString();
        const endTime = endDate.toISOString();

        const lineData = await getEnergySummary([1, 2, 3, 4, 6], startTime, endTime);

        const categories = lineData.hourlyAggregated.map(item => {
          const date = new Date(item.timestamp);
          return date.toLocaleString(undefined, {
            hour12: false,
            year: '2-digit',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          });
        });

        const values = lineData.hourlyAggregated.map(item => item.energyConsumed);

        setLineChartOptions({
          chart: { height: 400, width: 1200 },
          title: { text: 'Energy Consumption Over Time' },
          xAxis: {
            categories,
            labels: {
              rotation: 45,
              style: { fontSize: '10px' }
            }
          },
          yAxis: { title: { text: 'Energy Consumed (kWh)' } },
          series: [{ name: 'Date', data: values }],
          tooltip: {
            formatter: function () {
              return `<b>${this.x}</b><br/>${this.series.name}: <b>${this.y.toFixed(2)} kWh</b>`;
            }
          }
        });

        const pieData = await getSpaceWiseEnergy([1, 2, 3, 4, 6], startTime, endTime);
        const pieSeries = pieData.totalBySpace.map(space => ({
          name: `Space ${space.spaceId}`,
          y: space.energyConsumed
        }));

        setPieChartOptions({
          chart: { type: 'pie', height: 300, width: 500 },
          title: { text: 'Top 5 Spaces by Energy Consumption' },
          series: [{
            name: 'Energy Consumed (kWh)',
            data: pieSeries
          }],
          tooltip: {
            pointFormat: '{series.name}: <b>{point.y:.2f} kWh</b>'
          },
          plotOptions: {
            pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                enabled: true,
                format: '<b>{point.name}</b>: {point.percentage:.1f} %'
              }
            }
          }
        });
      } catch (error) {
        console.error("Error loading charts:", error);
      }
    };

    fetchData();
  }, [startDate, endDate]);

  const handleChange = (e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Submitting site:", formData);
      setSubmitStatus('Submitted successfully!');
      setFormData({
        siteName: '',
        address: '',
        contactPerson: '',
        contactEmail: '',
        contactPhone: ''
      });
    } catch (err) {
      console.error(err);
      setSubmitStatus('Submission failed.');
    }
  };

  return (
    <div className="container py-4">

      {/* Date Pickers */}
      <div className="mb-4 d-flex gap-3 align-items-center">
        <div>
          <label className="form-label">Start Date:</label>
          <DatePicker
            selected={startDate}
            onChange={(date) => setStartDate(date)}
            selectsStart
            startDate={startDate}
            endDate={endDate}
            dateFormat="yyyy-MM-dd HH:mm"
            showTimeSelect
          />
        </div>
        <div>
          <label className="form-label">End Date:</label>
          <DatePicker
            selected={endDate}
            onChange={(date) => setEndDate(date)}
            selectsEnd
            startDate={startDate}
            endDate={endDate}
            minDate={startDate}
            dateFormat="yyyy-MM-dd HH:mm"
            showTimeSelect
          />
        </div>
      </div>

      {/* Line Chart */}
      <div style={{ width: '1300px', marginBottom: '40px' }}>
        {lineChartOptions ? (
          <HighchartsReact highcharts={Highcharts} options={lineChartOptions} />
        ) : (
          <p>Loading line chart...</p>
        )}
      </div>

      {/* Pie Chart */}
      <div style={{ width: '520px', alignLeft: '0' }}>
        {pieChartOptions ? (
          <HighchartsReact highcharts={Highcharts} options={pieChartOptions} />
        ) : (
          <p>Loading pie chart...</p>
        )}
      </div>

      {/* Add New Site Form */}
      <div className="card p-4 mb-4" style={{ maxWidth: '600px' }}>
        <h4 className="mb-3">Add New Site</h4>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Site Name</label>
            <input
              type="text"
              className="form-control"
              name="siteName"
              value={formData.siteName}
              onChange={handleChange}
              required
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Address</label>
            <input
              type="text"
              className="form-control"
              name="address"
              value={formData.address}
              onChange={handleChange}
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Contact Person</label>
            <input
              type="text"
              className="form-control"
              name="contactPerson"
              value={formData.contactPerson}
              onChange={handleChange}
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Contact Email</label>
            <input
              type="email"
              className="form-control"
              name="contactEmail"
              value={formData.contactEmail}
              onChange={handleChange}
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Contact Phone</label>
            <input
              type="text"
              className="form-control"
              name="contactPhone"
              value={formData.contactPhone}
              onChange={handleChange}
            />
          </div>
          <button type="submit" className="btn btn-primary">Submit</button>
          {submitStatus && <p className="mt-2 text-success">{submitStatus}</p>}
        </form>
      </div>
    </div>
  );
};

export default EnergyChart;


//app.js

import React from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';
import EnergyChart from './components/EnergyChart'; 
function App() {
  return (
    <div className="App">
      <h1>Energy Consumption Dashboard</h1>
      <EnergyChart /> 
    </div>
  );
}

export default App;


//api.js

import axios from 'axios';

const BASE_URL = 'http://localhost:5130/api'; 
export const getEnergySummary = async (spaceIds, startTime, endTime) => {
  try {
    const response = await axios.get(`${BASE_URL}/MeterReadings/energy-summary`, {
      params: {
        spaceIds,
        startTime,
        endTime,

      },
    });

    console.log(" API Response from getEnergySummary:", response.data); 
    return response.data;
  } catch (error) {
    console.error(" API Error:", error);
    throw error;
  }
};

export const getSpaceWiseEnergy = async (spaceIds, startTime, endTime) => {
  try {
    const response = await axios.get(`${BASE_URL}/MeterReadings/space-wise-energy`, {
      params: { spaceIds, startTime, endTime },
    });
    console.log("API Response from getSpaceWiseEnergy:", response.data);
    return response.data;
  } catch (error) {
    console.error("API Error (space-wise-energy):", error);
    throw error;
  }
};
