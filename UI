// run " npm install bootstrap " in terminal before changing the code to implement the form //
//run "npm install react-datepicker"//
// run "npm install react-router-dom"//

//EnergyChart.jsx

import React, { useEffect, useState } from 'react';
import Highcharts from 'highcharts';
import HighchartsReact from 'highcharts-react-official';
import { getEnergySummary, getSpaceWiseEnergy } from '../services/api';
import 'bootstrap/dist/css/bootstrap.min.css';

const EnergyChart = () => {
  const [lineChartOptions, setLineChartOptions] = useState(null);
  const [pieChartOptions, setPieChartOptions] = useState(null);

  const startTime = '2023-06-01T00:00:00';
  const endTime = '2025-05-31T23:00:00';
  const spaceIds = [1, 2, 3, 4, 6]; 

  useEffect(() => {
    const fetchData = async () => {
      try {
        const lineData = await getEnergySummary(spaceIds, startTime, endTime);

        const categories = lineData.hourlyAggregated.map(item => {
          const date = new Date(item.timestamp);
          return date.toLocaleString(undefined, {
            hour12: false,
            year: '2-digit',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          });
        });

        const values = lineData.hourlyAggregated.map(item => item.energyConsumed);

        setLineChartOptions({
          chart: { height: 400, width: 1200 },
          title: { text: 'Energy Consumption Over Time' },
          xAxis: {
            categories,
            labels: {
              rotation: 45,
              style: { fontSize: '10px' }
            }
          },
          yAxis: { title: { text: 'Energy Consumed (kWh)' } },
          series: [{ name: 'Date', data: values }],
          tooltip: {
            formatter: function () {
              return `<b>${this.x}</b><br/>${this.series.name}: <b>${this.y.toFixed(2)} kWh</b>`;
            }
          }
        });

        const pieData = await getSpaceWiseEnergy(spaceIds, startTime, endTime);
        const pieSeries = pieData.totalBySpace
          .sort((a, b) => b.energyConsumed - a.energyConsumed)
          .slice(0, 5)
          .map(space => ({
            name: `Space ${space.spaceId}`,
            y: space.energyConsumed
          }));

        setPieChartOptions({
          chart: { type: 'pie', height: 300, width: 500 },
          title: { text: 'Top 5 Spaces by Energy Consumption' },
          series: [{
            name: 'Energy Consumed (kWh)',
            data: pieSeries
          }],
          tooltip: {
            pointFormat: '{series.name}: <b>{point.y:.2f} kWh</b>'
          },
          plotOptions: {
            pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                enabled: true,
                format: '<b>{point.name}</b>: {point.percentage:.1f} %'
              }
            }
          }
        });

      } catch (error) {
        console.error("Error loading charts:", error);
      }
    };

    fetchData();
  }, []);

  return (
    <div className="container py-4">
      <div className="mb-5">
        {lineChartOptions ? (
          <HighchartsReact highcharts={Highcharts} options={lineChartOptions} />
        ) : (
          <p>Loading line chart...</p>
        )}
      </div>

      <div className="mb-5">
        {pieChartOptions ? (
          <HighchartsReact highcharts={Highcharts} options={pieChartOptions} />
        ) : (
          <p>Loading pie chart...</p>
        )}
      </div>
    </div>
  );
};

export default EnergyChart;


//api.js

import axios from 'axios';

const BASE_URL = 'http://localhost:5076/api';

// GET summary of energy readings for given space(s) and time range
export const getEnergySummary = async (spaceIds, startTime, endTime) => {
  try {
    const response = await axios.get(`${BASE_URL}/MeterReadings/energy-summary`, {
      params: { spaceIds, startTime, endTime },
    });
    return response.data;
  } catch (error) {
    console.error("API Error (getEnergySummary):", error.response?.data || error.message);
    throw error;
  }
};

// GET energy data space-wise
export const getSpaceWiseEnergy = async (spaceIds, startTime, endTime) => {
  try {
    const response = await axios.get(`${BASE_URL}/MeterReadings/space-wise-energy`, {
      params: { spaceIds, startTime, endTime },
    });
    return response.data;
  } catch (error) {
    console.error("API Error (getSpaceWiseEnergy):", error.response?.data || error.message);
    throw error;
  }
};

// POST a new site
export const addSite = async (siteData) => {
  try {
    const response = await axios.post(`${BASE_URL}/Sites`, siteData);
    return response.data;
  } catch (error) {
    console.error("API Error (addSite):", error.response?.data || error.message);
    throw error;
  }
};

// GET details of a single site
export const getSingleSite = async () => {
  try {
    const response = await axios.get(`${BASE_URL}/Sites/Single`);
    return response.data;
  } catch (error) {
    console.error("API Error (getSingleSite):", error.response?.data || error.message);
    throw error;
  }
};

// PUT (update) site by ID
export const updateSite = async (id, siteData) => {
  try {
    const response = await axios.put(`${BASE_URL}/Sites/${id}`, siteData);
    return response.data;
  } catch (error) {
    console.error("API Error (updateSite):", error.response?.data || error.message);
    throw error;
  }
};


//app.js 

import React from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';
import SideBar from './components/SideBar';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import Profile from './pages/Profile';
import Settings from './pages/Settings';
import Logout from './pages/Logout';

function App() {
  return (
    <Router>
      <div>
        <header className="app-header">
          <h1 className="app-title">Vatika Business Park</h1>
        </header>

        <div className="d-flex mt-5">
          <SideBar />
          <div className="flex-grow-1 p-4">
            <Routes>
              <Route path="/" element={<Dashboard />} />
              <Route path="/profile" element={<Profile />} />
              <Route path="/settings" element={<Settings />} />
              <Route path="/logout" element={<Logout />} />
            </Routes>
          </div>
        </div>
      </div>
    </Router>
  );
}

export default App;


//SideBar.jsx (folder->components)

import React from 'react';
import { Link } from 'react-router-dom';
import '../App.css'; 

const SideBar = () => {
  return (
    <div className="sidebar p-3">
      <h4 className="mb-4">Menu</h4>
      <hr></hr>
      <ul className="nav flex-column">
        <li className="nav-item">
          <Link to="/profile" className="nav-link">Profile</Link>
        </li>
        <li className="nav-item">
          <Link to="/" className="nav-link">Dashboard</Link>
        </li>
        <li className="nav-item">
          <Link to="/settings" className="nav-link">Settings</Link>
        </li>
        <li className="nav-item">
          <Link to="/logout" className="nav-link">Logout</Link>
        </li>
      </ul>
    </div>
  );
};

export default SideBar;


//Dashboard.jsx (folder->pages)

import React, { useEffect, useState } from 'react';
import Highcharts from 'highcharts';
import HighchartsReact from 'highcharts-react-official';
import { getEnergySummary, getSpaceWiseEnergy } from '../services/api';

const Dashboard = () => {
  const [lineChartOptions, setLineChartOptions] = useState(null);
  const [pieChartOptions, setPieChartOptions] = useState(null);

  const startTime = '2023-06-01T00:00:00';
  const endTime = '2025-05-31T23:00:00';
  const spaceIds = [1, 2, 3, 4, 6];

  useEffect(() => {
    const fetchData = async () => {
      try {
        const lineData = await getEnergySummary(spaceIds, startTime, endTime);

        const categories = lineData.hourlyAggregated.map(item => {
          const date = new Date(item.timestamp);
          return date.toLocaleString(undefined, {
            hour12: false, year: '2-digit', month: '2-digit',
            day: '2-digit', hour: '2-digit', minute: '2-digit'
          });
        });

        const values = lineData.hourlyAggregated.map(item => item.energyConsumed);

        setLineChartOptions({
          chart: { height: 400, width: 1200 },
          title: { text: 'Energy Consumption Over Time' },
          xAxis: {
            categories,
            labels: { rotation: 45, style: { fontSize: '10px' } }
          },
          yAxis: { title: { text: 'Energy Consumed (kWh)' } },
          series: [{ name: 'Date', data: values }],
          tooltip: {
            formatter: function () {
              return `<b>${this.x}</b><br/>${this.series.name}: <b>${this.y.toFixed(2)} kWh</b>`;
            }
          }
        });

        const pieData = await getSpaceWiseEnergy(spaceIds, startTime, endTime);
        const pieSeries = pieData.totalBySpace
          .sort((a, b) => b.energyConsumed - a.energyConsumed)
          .slice(0, 5)
          .map(space => ({
            name: `Space ${space.spaceId}`,
            y: space.energyConsumed
          }));

        setPieChartOptions({
          chart: { type: 'pie', height: 300, width: 500 },
          title: { text: 'Top 5 Spaces by Energy Consumption' },
          series: [{ name: 'Energy Consumed (kWh)', data: pieSeries }],
          tooltip: { pointFormat: '{series.name}: <b>{point.y:.2f} kWh</b>' },
          plotOptions: {
            pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                enabled: true,
                format: '<b>{point.name}</b>: {point.percentage:.1f} %'
              }
            }
          }
        });

      } catch (error) {
        console.error("Error loading charts:", error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h2>Dashboard</h2>
      <div className="mb-4">
        {lineChartOptions ? (
          <HighchartsReact highcharts={Highcharts} options={lineChartOptions} />
        ) : <p>Loading line chart...</p>}
      </div>
      <div>
        {pieChartOptions ? (
          <HighchartsReact highcharts={Highcharts} options={pieChartOptions} />
        ) : <p>Loading pie chart...</p>}
      </div>
    </div>
  );
};

export default Dashboard;

//Settings.jsx (folder->pages)

import React, { useState, useEffect } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { getSingleSite, addSite } from '../services/api'; // Ensure both are correctly exported from api.js

const Settings = () => {
  const [formData, setFormData] = useState({
    siteName: '',
    address: '',
    contactPerson: '',
    contactEmail: '',
    contactPhone: '',
  });

  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    const fetchSite = async () => {
      try {
        const site = await getSingleSite(); // ✅ Use the correct function name
        setFormData(site);
      } catch (error) {
        console.error('Failed to fetch site data', error);
      }
    };
    fetchSite();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleCancel = () => {
    setIsEditing(false);
  };

  const handleSave = async () => {
  try {
    await addSite(formData);
    alert('Site saved successfully!');
    setIsEditing(false);
  } catch (error) {
    console.error('Error saving site:', error.response?.data || error.message);
    alert('Error saving site');
  }
};


  return (
    <div className="container mt-4">
      <div className="card p-4">
        <h4>Add New Site</h4>
        <form>
          {['siteName', 'address', 'contactPerson', 'contactEmail', 'contactPhone'].map((field) => (
            <div className="mb-3" key={field}>
              <label htmlFor={field} className="form-label">
                {field === 'siteName' ? 'Site Name' :
                 field === 'address' ? 'Address' :
                 field === 'contactPerson' ? 'Contact Person' :
                 field === 'contactEmail' ? 'Contact Email' : 'Contact Phone'}
              </label>
              <input
                type={field === 'contactEmail' ? 'email' : field === 'contactPhone' ? 'tel' : 'text'}
                className="form-control"
                id={field}
                name={field}
                value={formData[field]}
                onChange={handleChange}
                disabled={!isEditing}
              />
            </div>
          ))}

          {!isEditing ? (
            <button type="button" className="btn btn-primary" onClick={handleEdit}>
              Edit
            </button>
          ) : (
            <div className="d-flex gap-2">
              <button type="button" className="btn btn-success" onClick={handleSave}>
                Save
              </button>
              <button type="button" className="btn btn-secondary" onClick={handleCancel}>
                Cancel
              </button>
            </div>
          )}
        </form>
      </div>
    </div>
  );
};

export default Settings;


//Profile.jsx (folder->pages)

import React from 'react';

const Profile = () => {
  return <h2>Profile Page</h2>;
};

export default Profile;


//Logout.jsx (folder->pages)

import React from 'react';

const Logout = () => {
  return <h2>You have been logged out.</h2>;
};

export default Logout;

//SiteForm.jsx (folder->components)

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const BASE_URL = 'http://localhost:5076/api/Sites';

const SiteForm = ({ siteId = null }) => {
  const [formData, setFormData] = useState({
    siteName: '',
    address: '',
    contactPerson: '',
    contactEmail: '',
    contactPhone: ''
  });

  const [submitStatus, setSubmitStatus] = useState('');

  // 🔁 Fetch existing site data if siteId is provided (for editing)
  useEffect(() => {
    const fetchSite = async () => {
      try {
        if (siteId) {
          const response = await axios.get(`${BASE_URL}/${siteId}`);
          setFormData(response.data);
        }
      } catch (error) {
        console.error('Error loading site:', error);
      }
    };
    fetchSite();
  }, [siteId]);

  const handleChange = (e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (siteId) {
        // 🔄 Update existing site
        await axios.put(`${BASE_URL}/${siteId}`, { siteId, ...formData });
        setSubmitStatus('Site updated successfully!');
      } else {
        // 🆕 Create new site
        await axios.post(BASE_URL, formData);
        setSubmitStatus('Site created successfully!');
      }
      setFormData({
        siteName: '',
        address: '',
        contactPerson: '',
        contactEmail: '',
        contactPhone: ''
      });
    } catch (err) {
      console.error(err);
      setSubmitStatus('Submission failed.');
    }
  };

  return (
    <div className="card p-4 mb-4" style={{ maxWidth: '600px' }}>
      <h5>{siteId ? 'Edit Site' : 'Create New Site'}</h5>
      <form onSubmit={handleSubmit}>
        {['siteName', 'address', 'contactPerson', 'contactEmail', 'contactPhone'].map((field, i) => (
          <div className="mb-3" key={i}>
            <label className="form-label">{field.replace(/([A-Z])/g, ' $1')}</label>
            <input
              type={field === 'contactEmail' ? 'email' : 'text'}
              className="form-control"
              name={field}
              value={formData[field]}
              onChange={handleChange}
              required={field === 'siteName'}
            />
          </div>
        ))}
        <button type="submit" className="btn btn-primary">Submit</button>
        {submitStatus && <p className="mt-2 text-success">{submitStatus}</p>}
      </form>
    </div>
  );
};

export default SiteForm;


//app.css

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #3a465d;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.sidebar {
  background-color: #0d0e0e;
  color: rgb(255, 255, 255);
  width: 200px;
  height: 100vh;
}

.sidebar .nav-link {
  color: rgb(255, 255, 255);
  font-size: 16px;
  margin-bottom: 10px;
}

.sidebar .nav-link:hover {
  color: #61dafb; /* Light blue hover effect */
  text-decoration: none;
}


.app-header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: #f8f9fa;
  padding: 12px 24px;
  border-bottom: 1px solid #dee2e6;
  z-index: 1000;
}

.app-title {
  margin: 0;
  font-size: 28px;
  color:#000000;
  font-weight: bold;
}

.mt-5 {
  margin-top: 70px !important;
}
